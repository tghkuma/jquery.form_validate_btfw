{"version":3,"file":"jquery.btfw.form_validate.min.js","mappings":"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","sources":["webpack://jquery.form_validate_btfw/./js/jquery.btfw.form_validate.js"],"sourcesContent":["/**\n * @file パラメータチェックプラグイン\n * (TwitterBootstrap4.x対応)\n * @version 1.8.x\n * @see https://github.com/tghkuma/jquery.form_validate_btfw\n * @copyright {@link https://team-grasshopper.info/ Team-Grasshopper}\n */\n/**\n * @class\n * @name jQuery\n * @namespace jQuery\n * @exports $ as jQuery\n */\n(function ($, window) {\n  'use strict'\n\n  /** @default */\n  const pluginName = 'formValidate'\n  const pluginSettings = pluginName + '.settings'\n\n  /**\n   * @function\n   * @param {Object} method\n   * @return {Object} jQuery object\n   */\n  $.fn[pluginName] = function (method) {\n    let settings\n    const methods = {\n      /**\n       * 初期化処理\n       * @param {Object} options オプション\n       * @returns {*}\n       */\n      init: function (options) {\n        settings = $.extend({}, $.fn[pluginName].defaults, options)\n        return this.each(function () {\n          const $element = $(this)\n          $element.data(pluginSettings, settings)\n          // イベント登録処理\n          const eventNames = ['submit']\n          $.each(eventNames, function () {\n            const func = settings[this]\n            if (typeof func === 'string') {\n              $element.on(this + '.' + pluginName, function () {\n                return $element[pluginName](func)\n              })\n            } else if (typeof func === 'function') {\n              $element.on(this + '.' + pluginName, func)\n            }\n          })\n        })\n      },\n      /**\n       *\n       * @returns {*}\n       */\n      destroy: function () {\n        return this.each(function () {\n          const $element = $(this)\n          // イベント削除処理\n          const eventNames = ['submit']\n          $.each(eventNames, function () {\n            $element.off(this + '.' + pluginName)\n          })\n        })\n      },\n      /**\n       * エラー表示処理\n       * @param {Object[]} arrErrors エラー一覧\n       * @param {string} arrErrors[].name フィールド名\n       * @param {string} arrErrors[].message エラーメッセージ\n       */\n      dispError: function (arrErrors) {\n        const settings = $(this).data(pluginSettings)\n        const self = this\n        $.each(arrErrors, function (i, error) {\n          methods.setError.apply(self, [error.name, error.message])\n        })\n        if (arrErrors.length && settings.focusError > 0) {\n          // 最初のエラーにフォーカス\n          methods.focusError.apply(this, [arrErrors[0].name])\n        }\n      },\n\n      /**\n       * 指定のエラーにフォーカス\n       * @param {string} name\n       */\n      focusError: function (name) {\n        const settings = $(this).data(pluginSettings)\n        const field = $(this).find(\"*[name='\" + name + \"']\")\n        let p = 0\n        if (field.length !== 0) {\n          $(field).trigger('focus')\n          p = $(field).offset().top - $(window).innerHeight() / 2\n          if (p < 0) {\n            p = 0\n          }\n        } else {\n          console.warn(helpers.format(settings.messages.NOT_EXISTS_FIELD, name))\n        }\n        if ($.fn.animate !== undefined) {\n          $('html,body').animate({ scrollTop: p }, settings.focusErrorSpeed)\n        } else {\n          $('html,body').scrollTop(p)\n        }\n      },\n\n      /**\n       * エラークリア処理\n       * @param {string} name 項目名(未指定時全て)\n       */\n      clearError: function (name) {\n        const settings = $(this).data(pluginSettings)\n        if (typeof settings.clearError === 'function') {\n          settings.clearError.apply(this, [name])\n        } else if (settings.errorType === 'bs3') {\n          methods.clearErrorBootstrap3.apply(this, [name])\n        } else if (settings.errorType === 'tb2') {\n          methods.clearErrorTb2.apply(this, [name])\n        } else {\n          methods.clearErrorBootstrap.apply(this, [name])\n        }\n        return this\n      },\n\n      /**\n       * 指定箇所エラー表示処理\n       * @param {string} name 項目名\n       * @param {string} message エラー文言\n       */\n      setError: function (name, message) {\n        const settings = $(this).data(pluginSettings)\n        if (typeof settings.setError === 'function') {\n          settings.setError.apply(this, [name, message])\n        } else if (settings.errorType === 'bs3') {\n          methods.setErrorBootstrap3.apply(this, [name, message])\n        } else if (settings.errorType === 'tb2') {\n          methods.setErrorTb2.apply(this, [name, message])\n        } else {\n          methods.setErrorBootstrap.apply(this, [name, message])\n        }\n        return this\n      },\n\n      /**\n       * エラークリア処理\n       * (Bootstrap4レイアウト)\n       * @param {string} name 項目名(未指定時全て)\n       */\n      clearErrorBootstrap: function (name) {\n        if (name) {\n          const field = $(this).find(\"*[name='\" + name + \"']\")\n          $(field).removeClass('is-invalid')\n            .nextAll('.invalid-feedback').remove()\n        } else {\n          $(this).find('.is-invalid')\n            .removeClass('is-invalid')\n            .nextAll('.invalid-feedback').remove()\n        }\n        return this\n      },\n\n      /**\n       * 指定箇所エラー表示処理\n       * (Bootstrap4レイアウト)\n       * @param {string} name 項目名\n       * @param {string} message エラー文言\n       */\n      setErrorBootstrap: function (name, message) {\n        const field = $(this).find(\"*[name='\" + name + \"']\")\n        const errorMessage = '<div class=\"invalid-feedback\">' + message + '</div>'\n\n        if (['radio', 'checkbox'].indexOf(field.attr('type')) === -1) {\n          $(field).addClass('is-invalid')\n          if (!$(field).parent().hasClass('input-group')) {\n            $(field).filter(':last').after(errorMessage)\n          } else {\n            $(field).parent().append(errorMessage)\n          }\n        } else {\n          const formCheck = $(field).addClass('is-invalid').closest('.form-check').addClass('is-invalid')\n          $(formCheck).filter(':last').after(errorMessage)\n        }\n        return this\n      },\n\n      /**\n       * エラークリア処理\n       * (Bootstrap3レイアウト)\n       * @param {string} name 項目名(未指定時全て)\n       */\n      clearErrorBootstrap3: function (name) {\n        if (name) {\n          const field = $(this).find(\"*[name='\" + name + \"']\")\n          $(field).closest('.form-group')\n            .removeClass('has-error')\n            .find('.errorMessage').remove()\n        } else {\n          $(this).find('.form-group')\n            .removeClass('has-error')\n            .find('.errorMessage').remove()\n        }\n        return this\n      },\n\n      /**\n       * 指定箇所エラー表示処理\n       * (Bootstrap3レイアウト)\n       * @param {string} name 項目名\n       * @param {string} message エラー文言\n       */\n      setErrorBootstrap3: function (name, message) {\n        const field = $(this).find(\"*[name='\" + name + \"']\")\n        const errorMessage = '<span class=\"help-block errorMessage\">' + message + '</span>'\n        $(field).closest('.form-group').addClass('has-error')\n        if (['radio', 'checkbox'].indexOf(field.attr('type')) === -1) {\n          const inputGroup = $(field).closest('.input-group')\n          if ($(inputGroup).length !== 0) {\n            $(inputGroup).after(errorMessage)\n          } else {\n            $(field).filter(':last').after(errorMessage)\n          }\n        } else {\n          $(field).filter(':last').parent().after(errorMessage)\n        }\n        return this\n      },\n\n      /**\n       * エラークリア処理\n       * (TwitterBootstrap2.xレイアウト)\n       * @param {string} name 項目名(未指定時全て)\n       */\n      clearErrorTb2: function (name) {\n        if (name) {\n          const field = $(this).find(\"*[name='\" + name + \"']\")\n          $(field).closest('.control-group')\n            .removeClass('error')\n            .find('.errorMessage').remove()\n        } else {\n          $(this).find('.control-group')\n            .removeClass('error')\n            .find('.errorMessage').remove()\n        }\n        return this\n      },\n\n      /**\n       * 指定箇所エラー表示処理\n       * (TwitterBootstrap2.xレイアウト)\n       * @param {string} name 項目名\n       * @param {string} message エラー文言\n       */\n      setErrorTb2: function (name, message) {\n        const field = $(this).find(\"*[name='\" + name + \"']\")\n        $(field).closest('.control-group').addClass('error')\n        $(field).closest('.controls').append('<div class=\"help-block errorMessage\">' + message + '</div>')\n        return this\n      },\n\n      /**\n       * パラメータチェック\n       * @param {Object} options オプション\n       */\n      validate: function (options) {\n        settings = $.extend($(this).data(pluginSettings), options)\n\n        methods.clearError.apply(this)\n        let result = true\n        const arrErrors = methods.getValidateResult.apply(this, [settings])\n        if (arrErrors.length > 0) {\n          methods.dispError.apply(this, [arrErrors])\n          result = false\n        }\n        if (typeof settings.result === 'function') {\n          result = settings.result.apply(this, [result, arrErrors])\n        }\n        return result\n      },\n\n      /**\n       * パラメータチェック\n       * (エラー時アラート)\n       * @param {Object} options オプション\n       * @returns {boolean|string[]} エラー値\n       */\n      validate_alert: function (options) {\n        settings = $.extend($(this).data(pluginSettings), options)\n\n        let result = true\n        const arrErrors = methods.getValidateResult.apply(this, [settings])\n        if (arrErrors.length > 0) {\n          window.alert(settings.messages.VALIDATE_ERROR + '\\n' + helpers.join(arrErrors))\n          if (settings.focusError) {\n            // 最初のエラーにフォーカス\n            methods.focusError.apply(this, [arrErrors[0].name])\n          }\n          result = false\n        }\n        if (typeof settings.result === 'function') {\n          result = settings.result.apply(this, [result, arrErrors])\n        }\n        return result\n      },\n\n      /**\n       * パラメータチェック結果取得\n       * @param {Object} options\n       * @returns {boolean|string[]} エラー値\n       */\n      getValidateResult: function (options) {\n        const form = this\n        settings = $.extend($(this).data(pluginSettings), options)\n\n        let arrErrors = []\n        const fields = settings.fields ||\n            methods.getFieldsRules.apply(this, [settings])\n\n        // 未サポートパラメータ\n        if (!Array.isArray(fields)) {\n          return arrErrors\n        }\n\n        $.each(fields, function (i, field) {\n          if (!field.rules) {\n            return true\n          }\n\n          // パラメータチェック方法\n          let arrRules = field.rules\n          if (!Array.isArray(arrRules)) {\n            arrRules = [arrRules]\n          }\n          // パラメータ値\n          const $objVal = $(form).find(\"*[name='\" + field.name + \"']\")\n          // 値存在チェック\n          const bValueExists = helpers.existsValue($objVal)\n\n          // 各パラメータのチェック処理\n          $.each(arrRules, function (i, rule) {\n            const arrRuleErrors = []\n            let errors\n            let params\n\n            // ------------------\n            // ルール分岐\n            // ------------------\n            // ルールが配列\n            // [ 'ルール名', [<パラメータ配列>]]\n            // [ 'ルール名', <パラメータ1>, <パラメータ2>..., <パラメータn> ]\n            if (Array.isArray(rule)) {\n              if (rule.length === 0) {\n                return\n              } else if (rule.length === 2) {\n                params = rule[1]\n                if (!Array.isArray(params)) {\n                  params = [params]\n                }\n              } else if (rule.length >= 3) {\n                params = rule.slice(1)\n              }\n              rule = rule[0]\n            } else if (typeof rule === 'object') {\n              // ルールがObject\n              // { rule:'ルール名', params:[<パラメータ配列>]}\n              if (!rule.rule) {\n                return\n              }\n              if (rule.params) {\n                params = rule.params\n                if (!Array.isArray(params)) {\n                  params = [params]\n                }\n              }\n              rule = rule.rule\n            } else if (typeof rule === 'string') {\n              // ルールが文字列(旧仕様)\n              // パラメータ解析処理\n              params = rule.split(':', 2)\n              if (params[0]) {\n                rule = params[0]\n              }\n              if (params[1]) {\n                try {\n                  params = JSON.parse(params[1])\n                } catch (e) {\n                  params = params[1].split(',')\n                }\n                if (!Array.isArray(params)) {\n                  params = [params]\n                }\n              } else {\n                params = []\n              }\n            }\n\n            // 独自チェック関数\n            if (typeof rule === 'function') {\n              errors = rule.apply(form, [field, $objVal, params, settings])\n              helpers.pushErrors(arrRuleErrors, field, errors)\n            } else if (typeof rule === 'string') {\n              // 指定フィールドに値が入っているとき\n              if (bValueExists) {\n                if (validateExistsMethods[rule]) {\n                  errors = validateExistsMethods[rule].apply(form, [field, $objVal, params, settings])\n                  helpers.pushErrors(arrRuleErrors, field, errors)\n                }\n                // else {\n                //   $.error( 'validateExistsMethod \"' +  rule + '\" does not exist in '+pluginName+' plugin!');\n                // }\n              } else {\n                // 指定フィールドに値が入っていないとき\n                // 必須項目チェック\n                if (rule === 'required') {\n                  helpers.pushErrors(arrRuleErrors, field, settings.messages.REQUIRED)\n                } else if (rule === 'checkbox') {\n                  errors = validateExistsMethods[rule].apply(form, [field, $objVal, params, settings])\n                  helpers.pushErrors(arrRuleErrors, field, errors)\n                } else if (validateMethods[rule]) {\n                  errors = validateMethods[rule].apply(form, [field, $objVal, params, settings])\n                  helpers.pushErrors(arrRuleErrors, field, errors)\n                }\n                // else {\n                //   $.error( 'validateMethods \"' +  rule + '\" does not exist in '+pluginName+' plugin!');\n                // }\n              }\n            }\n\n            // エラー時追加\n            if (arrRuleErrors && arrRuleErrors.length > 0) {\n              arrErrors = arrErrors.concat(arrRuleErrors)\n            }\n          })\n          return true\n        })\n        return arrErrors\n      },\n\n      /**\n       * フィールド/ルール情報取得\n       * @returns {Array<Object>}\n       */\n      getFieldsRules: function () {\n        const fields = []\n        const formElements = $(this).get(0).elements\n        Array.from(formElements).forEach(function (element) {\n          const name = element.name\n          if (!name) {\n            return\n          }\n          const type = element.getAttribute('type')\n          if (type === 'radio' || type === 'checkbox') {\n            if (fields.find(item => item.name === element.name)) {\n              return\n            }\n          }\n          const rules = []\n          if (element.required) {\n            rules.push('required')\n          }\n          // 属性によるパターン\n          [['minLength', 'minlength'], ['maxLength', 'maxlength'], 'min', 'max', ['pattern', 'regexp']].forEach(function (attr) {\n            let rule\n            if (Array.isArray(attr)) {\n              rule = attr[1]\n              attr = attr[0]\n            } else {\n              rule = attr\n            }\n            const value = element.getAttribute(attr)\n            if (value !== null) {\n              rules.push([rule, value])\n            }\n          })\n          // type=\"xxx\"によるバリデート判別\n          let rule\n          switch (type) {\n            case 'date':\n            case 'email':\n            case 'tel':\n              rule = type\n              break\n            case 'number':\n              rule = 'numeric'\n              break\n            case 'time':\n              rule = ['time', 'hm']\n              break\n          }\n          if (rule) {\n            rules.push(rule)\n          }\n          fields.push({ name: name, rules: rules })\n        })\n        return fields\n      }\n    }\n\n    /**\n     * バリデート処理群\n     * @class\n     */\n    const validateMethods = {\n      /**\n       * 数値チェック(値なし)\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      numeric: function (field, objVal) {\n        // type=\"number\"時の仮対策\n        if (objVal[0] && objVal[0].validity && objVal[0].validity.badInput) {\n          return objVal[0].validationMessage\n        }\n        return null\n      },\n      /**\n       * 数値チェック(値なし,エイリアス)\n       * @alias validateMethods.numeric\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      number: function (field, objVal) {\n        return validateMethods.numeric.apply(this, [field, objVal])\n      },\n\n      /**\n       * 郵便番号の4桁部分が入力された場合\n       * 3桁部が入力必須になるチェック\n       * @param {Object} field フィールド名\n       * @param {string} field.name フィールド物理名\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {*} params ルールパラメータ\n       * @param {Object} settings 設定情報\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      zip_ex: function (field, objVal, params, settings) {\n        const zipAfter = $(this).find(\"*[name='\" + field.name + settings.zip_suffix + \"']\")\n        if (objVal && helpers.getValue(objVal) && (!zipAfter || !zipAfter.val())) {\n          return settings.messages.INSUFFICIENT\n        }\n        return null\n      },\n\n      /**\n       * 年月日チェック\n       * フォーム name+\"_y\", name+\"_m\", name+\"_d\"のチェックを行う\n       * @param {Object} field フィールド名\n       * @param {string} field.name フィールド物理名\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {string[]} params ルールパラメータ\n       * @param {string} params[0] \"required\":必須チェック\n       * @returns {string[]} エラー一覧(正常時空配列)\n       */\n      ymd: function (field, objVal, params) {\n        // 変数宣言\n        const arrErrors = []\n\n        // 日付オブジェクト取得\n        let year = null\n        let month = null\n        let day = null\n        let isYear = false\n        let isMonth = false\n        let isDay = false\n        const objY = $(this).find(\"*[name='\" + field.name + settings.ymd_suffix_y + \"']\")\n        const objM = $(this).find(\"*[name='\" + field.name + settings.ymd_suffix_m + \"']\")\n        const objD = $(this).find(\"*[name='\" + field.name + settings.ymd_suffix_d + \"']\")\n        if (objY && objY.val() !== '') {\n          isYear = true\n          year = objY.val()\n        }\n        if (objM && objM.val() !== '') {\n          isMonth = true\n          month = objM.val()\n        }\n        if (objD && objD.val() !== '') {\n          isDay = true\n          day = objD.val()\n        }\n\n        // 日付必須チェック\n        if (params[0] === 'required') {\n          if (!isYear) {\n            arrErrors.push(helpers.format(settings.messages.REQUIRED_PART, settings.messages.DATE_PART_Y))\n          }\n          if (!isMonth) {\n            arrErrors.push(helpers.format(settings.messages.REQUIRED_PART, settings.messages.DATE_PART_M))\n          }\n          if (!isDay) {\n            arrErrors.push(helpers.format(settings.messages.REQUIRED_PART, settings.messages.DATE_PART_D))\n          }\n        } else {\n          // 日付の年月日が一部のみ入力されているとき\n          if ((isYear || isMonth || isDay) && !(isYear && isMonth && isDay)) {\n            if (!isYear) {\n              arrErrors.push(helpers.format(settings.messages.INSUFFICIENT_PART, settings.messages.DATE_PART_Y))\n            }\n            if (!isMonth) {\n              arrErrors.push(helpers.format(settings.messages.INSUFFICIENT_PART, settings.messages.DATE_PART_M))\n            }\n            if (!isDay) {\n              arrErrors.push(helpers.format(settings.messages.INSUFFICIENT_PART, settings.messages.DATE_PART_D))\n            }\n          }\n        }\n        // 年数値チェック\n        if (isYear && !helpers._isInteger(year)) {\n          arrErrors.push(helpers.format(settings.messages.INTEGER_PART, settings.messages.DATE_PART_Y))\n        }\n        // 月数値チェック\n        if (isMonth && !helpers._isInteger(month)) {\n          arrErrors.push(helpers.format(settings.messages.INTEGER_PART, settings.messages.DATE_PART_M))\n        }\n        // 日数値チェック\n        if (isDay && !helpers._isInteger(day)) {\n          arrErrors.push(helpers.format(settings.messages.INTEGER_PART, settings.messages.DATE_PART_D))\n        }\n\n        // 年月日チェック\n        if (arrErrors.length === 0 && !helpers._isDate(year, month, day)) {\n          arrErrors.push(helpers.format(settings.messages.DATE_INVALID))\n        }\n\n        return arrErrors\n      }\n    }\n\n    /**\n     * パラメータチェック群\n     * @class\n     */\n    const validateExistsMethods = {\n      /**\n       * 確認項目\n       * @param {Object} field フィールド名\n       * @param {Object} field.name フィールド物理名\n       * @param {Object} field.d_name フィールド表示名\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      confirm: function (field, objVal) {\n        const confirmVal = $(this).find(\"*[name='\" + field.name + settings.confirm_suffix + \"']\")\n        if (!objVal || !confirmVal || helpers.getValue(objVal) !== confirmVal.val()) {\n          return helpers.format(settings.messages.CONFIRM, (field.d_name ? field.d_name : settings.messages.CONFIRM_FIELD))\n        }\n        return null\n      },\n      /**\n       * E-Mailチェック\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      email: function (field, objVal) {\n        const val = helpers.getValue(objVal)\n        if (val) {\n          const errorEmail = helpers._isEmailEx(val)\n          if (errorEmail !== '') {\n            return errorEmail\n          }\n        }\n        return null\n      },\n      /**\n       * 全角\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      zenkaku: function (field, objVal) {\n        if (!helpers._isZenkaku(helpers.getValue(objVal))) {\n          return settings.messages.ZENKAKU\n        }\n        return null\n      },\n      /**\n       * 半角\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      hankaku: function (field, objVal) {\n        if (!helpers._isHankaku(helpers.getValue(objVal))) {\n          return settings.messages.HANKAKU\n        }\n        return null\n      },\n      /**\n       * 全角カタカナ\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      zen_katakana: function (field, objVal) {\n        if (!helpers._isAllKana(helpers.getValue(objVal))) {\n          return settings.messages.ZEN_KANA\n        }\n        return null\n      },\n      /**\n       * 全角ひらがな\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      hiragana: function (field, objVal) {\n        if (!helpers._isAllHiragana(helpers.getValue(objVal))) {\n          return settings.messages.HIRAGANA\n        }\n        return null\n      },\n      /**\n       * 電話番号\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      tel: function (field, objVal) {\n        if (!helpers._isTel(helpers.getValue(objVal))) {\n          return settings.messages.TEL\n        }\n        return null\n      },\n      /**\n       * 最小文字数\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {Array<string|number>} params ルールパラメータ\n       * @param {string|number} params[0] 最小文字数\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      minlength: function (field, objVal, params) {\n        const min = Number(params[0])\n        if (helpers.getValue(objVal).length < min) {\n          return helpers.format(settings.messages.MIN_LENGTH, min)\n        }\n        return null\n      },\n      /**\n       * 最大文字数\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {Array<string|number>} params ルールパラメータ\n       * @param {string|number} params[0] 最大文字数\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      maxlength: function (field, objVal, params) {\n        const max = Number(params[0])\n        if (max < helpers.getValue(objVal).length) {\n          return helpers.format(settings.messages.MAX_LENGTH, max)\n        }\n        return null\n      },\n      /**\n       * 数値チェック\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      numeric: function (field, objVal) {\n        const val = helpers.getValue(objVal)\n        if (!isFinite(val) || val.indexOf(' ') !== -1 || val.indexOf('0x') !== -1) {\n          return settings.messages.NUMERICAL_VALUE\n        }\n        return null\n      },\n      /**\n       * 数値チェック(エイリアス)\n       * @alias validateExistsMethods.numeric\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      number: function (field, objVal) {\n        return validateExistsMethods.numeric.apply(this, [field, objVal])\n      },\n      /**\n       * 数値桁数チェック\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {Array<string|number>} params ルールパラメータ\n       * @param {string|number} params[0] 最小桁数\n       * @param {string|number} params[1] 最大桁数\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      numlength: function (field, objVal, params) {\n        const val = helpers.getValue(objVal)\n        let tmpReg = params[0]\n        let tmpErrMessage = params[0]\n        if (params[1]) {\n          tmpReg += ',' + params[1]\n          tmpErrMessage += '～' + params[1]\n        }\n        const reg = new RegExp('^\\\\d{' + tmpReg + '}$')\n        if (!reg.test(val)) {\n          return helpers.format(settings.messages.NUM_LENGTH, tmpErrMessage)\n        }\n        return null\n      },\n      /**\n       * 最小値\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {Array<string|number>} params ルールパラメータ\n       * @param {string|number} params[0] 最小値\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      min: function (field, objVal, params) {\n        const val = helpers.getValue(objVal)\n        if (!helpers._isInteger(val)) {\n          return settings.messages.INTEGER\n        }\n        const min = Number(params[0])\n        if (val < min) {\n          return helpers.format(settings.messages.MIN, min)\n        }\n        return null\n      },\n      /**\n       * 最大値\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {Array<string|number>} params ルールパラメータ\n       * @param {string|number} params[0] 最大値\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      max: function (field, objVal, params) {\n        const val = helpers.getValue(objVal)\n        if (!helpers._isInteger(val)) {\n          return settings.messages.INTEGER\n        }\n        const max = Number(params[0])\n        if (max < val) {\n          return helpers.format(settings.messages.MIN, max)\n        }\n        return null\n      },\n      /**\n       * 数値範囲\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {Array<string|number>} params ルールパラメータ\n       * @param {string|number} params[0] 最小値\n       * @param {string|number} params[1] 最大値\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      range: function (field, objVal, params) {\n        const val = helpers.getValue(objVal)\n        if (!helpers._isInteger(val)) {\n          return settings.messages.INTEGER\n        }\n        const min = Number(params[0])\n        const max = Number(params[1])\n        if (val < min || max < val) {\n          return helpers.format(settings.messages.RANGE, min, max)\n        }\n        return null\n      },\n      /**\n       * 日付\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      date: function (field, objVal) {\n        const val = helpers.getValue(objVal)\n        // 1980/1/2\n        //      ↓\n        // 1980/1/2,1980/1/2,1980,1,2\n        if (!val.match(/^((\\d{1,4})[/-](\\d{1,2})[/-](\\d{1,2}))$/g)) {\n          return settings.messages.DATE\n        }\n        // 年月日チェック\n        if (!helpers._isDate(RegExp.$2, RegExp.$3, RegExp.$4)) {\n          return settings.messages.DATE_INVALID\n        }\n        return null\n      },\n      /**\n       * 日時チェック\n       * [YYYY-MM-DD hh:mm:ss]または[YYYY/MM/DD]の書式でチェックする\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      datetime: function (field, objVal) {\n        const val = helpers.getValue(objVal)\n        // 1980/1/2 24:12:11\n        //      ↓\n        // 1980/1/2 23:12:11,1980/1/2,1980,1,2, 24:12:11,23:12:11,23,12,11\n        if (!val.match(/^((\\d{1,4})[/-](\\d{1,2})[/-](\\d{1,2}))( ((\\d{1,2}):(\\d{1,2})(:(\\d{1,2}))?))?$/g)) {\n          return settings.messages.DATETIME\n        }\n        // 年月日チェック\n        if (!helpers._isDate(RegExp.$2, RegExp.$3, RegExp.$4)) {\n          return settings.messages.DATE_INVALID\n        }\n        if (RegExp.$6 && !helpers._isTime(RegExp.$7, RegExp.$8, RegExp.$10)) {\n          return settings.messages.TIME_INVALID\n        }\n        return null\n      },\n      /**\n       * 日付チェック\n       * [YYYY/MM/DD] or [YYYY/MM] or [YYYY]の書式でチェックする\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      date_ex: function (field, objVal) {\n        const val = helpers.getValue(objVal)\n        // 1980/1/2\n        //      ↓\n        // 1980/1/2,1980/1/2,1980,1,2\n        if (!val.match(/^(\\d{1,4})([/-](\\d{1,2})([/-](\\d{1,2}))?)?$/)) {\n          return settings.messages.DATE_EX\n        }\n        // 年月日チェック\n        const y = RegExp.$1\n        const m = RegExp.$3 ? RegExp.$3 : 1\n        const d = RegExp.$5 ? RegExp.$5 : 1\n        if (!helpers._isDate(y, m, d)) {\n          return settings.messages.DATE_INVALID\n        }\n        return null\n      },\n      /**\n       * 時間チェック\n       * [hh:mm:ss]の書式でチェックする\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {string[]} params ルールパラメータ\n       * @param {string} params[0] 'hm':[hh:mm]の書式でチェック\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      time: function (field, objVal, params) {\n        const val = helpers.getValue(objVal)\n        if (params[0] === 'hm') {\n          if (!val.match(/^(\\d{1,2}):(\\d{1,2})$/g)) {\n            return settings.messages.TIME_HM\n          }\n          if (!helpers._isTime(RegExp.$1, RegExp.$2, 0)) {\n            return settings.messages.TIME_INVALID\n          }\n        } else {\n          if (!val.match(/^(\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/g)) {\n            return settings.messages.TIME\n          }\n          if (!helpers._isTime(RegExp.$1, RegExp.$2, RegExp.$3)) {\n            return settings.messages.TIME_INVALID\n          }\n        }\n        return null\n      },\n      /**\n       * 郵便番号\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      zip: function (field, objVal) {\n        const val = helpers.getValue(objVal)\n        if (!val.match(/^\\d{1,3}-\\d{1,4}$/g)) {\n          return settings.messages.ZIP\n        }\n        return null\n      },\n      /**\n       * チェックボックス\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {Array<string|number>} params ルールパラメータ\n       * @param {string|number} params[0] 最小選択数\n       * @param {string|number} params[1] 最大選択数\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      checkbox: function (field, objVal, params) {\n        const check = objVal.filter(':checked').length\n        const min = Number(params[0])\n        if (params.length >= 2) {\n          const max = Number(params[1])\n          if (check < min || max < check) {\n            return helpers.format(settings.messages.CHECKBOX_RANGE, min, max)\n          }\n        } else {\n          if (check < min) {\n            return helpers.format(settings.messages.CHECKBOX_MIN, min)\n          }\n        }\n      },\n\n      /**\n       * 正規表現チェック\n       * @param {object} field フィールド\n       * @param {jQuery} objVal 値オブジェクト\n       * @param {Array<string|RegExp>} params 正規表現パラメータ\n       * @param {string|RegExp} params[0] 正規表現(文字列 or 正規表現クラス)\n       * @param {string} params[1] 正規表現フラグ(オプション)\n       * @param {string} params.{1|2} エラーメッセージ(オプション)\n       * @returns {string|null} エラーメッセージ(正常時null)\n       */\n      regexp: function (field, objVal, params) {\n        const val = helpers.getValue(objVal)\n        let reg, errorMessage\n        if (!Array.isArray(params)) {\n          params = [params]\n        }\n        try {\n          if (typeof params[0] === 'string') {\n            reg = new RegExp(params[0], params[1] ? params[1] : undefined)\n            errorMessage = params[2]\n          } else {\n            reg = params[0]\n            errorMessage = params[1]\n          }\n          if (!reg.test(val)) {\n            return (errorMessage || settings.messages.REGEXP_INVALID_VALUE)\n          }\n        } catch (e) {\n          return settings.messages.REGEXP_INVALID_PARAM\n        }\n        return null\n      }\n    }\n\n    /**\n     * 補助処理群\n     * @class\n     */\n    const helpers = {\n      /**\n       * 値が存在するか？\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {boolean} true:存在する\n       */\n      existsValue: function (objVal) {\n        let ret\n        if (!objVal) {\n          ret = false\n        } else if (objVal.attr('type') === 'checkbox') {\n          ret = (objVal.filter(':checked').length > 0)\n        } else {\n          ret = !!helpers.getValue(objVal)\n        }\n        return ret\n      },\n      /**\n       * 値を返す\n       * @param {jQuery} objVal 値オブジェクト\n       * @returns {*} 値\n       */\n      getValue: function (objVal) {\n        const type = objVal.attr('type')\n        let val\n        if (type === 'radio') {\n          val = objVal.filter(':checked').val()\n        } else if (type !== 'checkbox') {\n          val = objVal.val()\n        } else {\n          val = []\n          objVal.filter(':checked').each(function () {\n            val.push($(this).val())\n          })\n        }\n        return val\n      },\n      /**\n       * エラー配列付加\n       * @param {string[]|Object[]} arrErrors エラー情報配列\n       * @param {Object} field    フィールド情報\n       * @param {string|string[]} errors 追加エラー情報\n       * @return {string[]|Object[]} array arrErrors\n       */\n      pushErrors: function (arrErrors, field, errors) {\n        if (typeof errors === 'string' && errors) {\n          arrErrors.push({ name: field.name, d_name: field.d_name, message: errors })\n        } else if (Array.isArray(errors)) {\n          $.each(errors, function (i, error) {\n            arrErrors.push({ name: field.name, d_name: field.d_name, message: error })\n          })\n        }\n        return arrErrors\n      },\n      /**\n       * 半角英数字チェック\n       * @param {string} _text  文字列\n       * @return {boolean} true:OK, false:NG\n       */\n      _isHankaku: function (_text) {\n        // 半角以外が存在する場合\n        return !(/[^\\x20-\\x7E]/).test(_text)\n      },\n\n      /**\n       * 全角チェック\n       * @param {string} _text  文字列\n       * @return {boolean} true:OK, false:NG\n       */\n      _isZenkaku: function (_text) {\n        return !(/[\\w\\-.]/).test(_text)\n      },\n\n      /**\n       * 電話番号チェック\n       * @param {string} inpText  文字列\n       * @return {boolean} true:OK, false:NG\n       */\n      _isTel: function (inpText) {\n        // 「0～9」「-」「(」「)」以外があったらエラー\n        return !(/[^0-9-()]/).test(inpText)\n      },\n\n      /**\n       * 整数チェック\n       * @param {?string} _value 値\n       * @return {boolean} true:OK, false:NG\n       */\n      _isInteger: function (_value) {\n        const test = /^(-\\d+|\\d*)$/.test('' + _value)\n        return test && !isNaN(_value)\n      },\n\n      /**\n       * 年月日整合性チェック\n       * @param {?string|?number} _year  年\n       * @param {?string|?number} _month 月\n       * @param {?string|?number} _day 日\n       * @return {boolean} true:OK, false:NG\n       */\n      _isDate: function (_year, _month, _day) {\n        //= =========================\n        // 年範囲チェック\n        //= =========================\n        if (_year < 1900 || _year > 9999) {\n          return false\n        }\n        //= =========================\n        // 月範囲チェック\n        //= =========================\n        if (_month < 1 || _month > 12) {\n          return false\n        }\n        //= =========================\n        // 日範囲チェック\n        //= =========================\n        // 最小値\n        if (_day < 1) {\n          return false\n        }\n        // 最大値\n        const arrMaxMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        // 2月うるう年補正\n        if ((_year % 4 === 0 && _year % 100 !== 0) || _year % 400 === 0) {\n          arrMaxMonth[1] = 29\n        }\n        return !(arrMaxMonth[_month - 1] < _day)\n      },\n\n      /**\n       * 時分整合性チェック\n       * @param {string|number} _hour  時\n       * @param {string|number} _minute  分\n       * @param {?string|?number} _second  秒(null=未チェック)\n       * @return {boolean} true:OK, false:NG\n       */\n      _isTime: function (_hour, _minute, _second) {\n        // ====================\n        // 時範囲チェック\n        // ====================\n        if (_hour < 0 || _hour >= 24) {\n          return false\n        }\n        // =====================\n        // 分範囲チェック\n        // =====================\n        if (_minute < 0 || _minute >= 60) {\n          return false\n        }\n        // =====================\n        // 秒範囲チェック\n        // =====================\n        return !(_second !== null && (_second < 0 || _second >= 60))\n      },\n\n      /**\n       * 全角カタカナチェック\n       * @param {string} _text  文字列\n       * @return {boolean} true:OK, false:NG\n       */\n      _isAllKana: function (_text) {\n        for (let i = 0; i < _text.length; i++) {\n          // if(_text.charAt(i) < 'ア' || _text.charAt(i) > 'ン'){\n          if (_text.charAt(i) < 'ァ' || _text.charAt(i) > 'ヶ') {\n            if (_text.charAt(i) !== 'ー' && _text.charAt(i) !== ' ' && _text.charAt(i) !== '　') {\n              return false\n            }\n          }\n        }\n        return true\n      },\n\n      /**\n       * 全角ひらがなチェック\n       * @param {string} _text  文字列\n       * @return {boolean} true:OK, false:NG\n       */\n      _isAllHiragana: function (_text) {\n        for (let i = 0; i < _text.length; i++) {\n          if (_text.charAt(i) < 'ぁ' || _text.charAt(i) > 'ん') {\n            if (_text.charAt(i) !== 'ー' && _text.charAt(i) !== ' ' && _text.charAt(i) !== '　') {\n              return false\n            }\n          }\n        }\n        return true\n      },\n\n      /**\n       * EMailチェック\n       * @param {string} _strEmail  EMAIL\n       * @return {string} '':エラー無し, ''以外:エラー\n       */\n      _isEmailEx: function (_strEmail) {\n        const emailPat = /^(.+)@(.+)$/\n        const specialChars = '\\\\(\\\\)<>@,;:\\\\\\\\\"\\\\.\\\\[\\\\]'\n        const validChars = '[^\\\\s' + specialChars + ']'\n        // const quotedUser = '(\"[^\"]*\")';\n        const ipDomainPat = /^\\[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})]$/\n        const atom = validChars + '+'\n        // const word = '(' + atom + '|' + quotedUser + ')';\n        // const userPat = new RegExp('^' + word + '(\\.' + word + ')*$');\n        const domainPat = new RegExp('^' + atom + '(\\\\.' + atom + ')*$')\n\n        // 最初の「@」で分割\n        const matchArray = _strEmail.match(emailPat)\n\n        // 「@」がない\n        if (matchArray === null) {\n          return settings.messages.MAIL_NO_AT\n        }\n\n        // ユーザーとドメインとして格納\n        // const user=matchArray[1];\n        const domain = matchArray[2]\n\n        // KUMA:携帯用パッチ\n        /*\n        // ユーザー部が無い\n        if (user.match(userPat)==null) {\n            return \"正しくありません(USER).\"+userPat;\n        }\n        */\n        // ドメイン名のIPパターンチェック\n        const IPArray = domain.match(ipDomainPat)\n        if (IPArray !== null) {\n          for (let i = 1; i <= 4; i++) {\n            if (IPArray[i] > 255) {\n              return settings.messages.MAIL_INVALID_IP\n            }\n          }\n        }\n\n        // ドメイン名パターンチェック\n        const domainArray = domain.match(domainPat)\n        if (domainArray === null) {\n          return settings.messages.MAIL_NO_DOMAIN\n        }\n\n        const atomPat = new RegExp(atom, 'g')\n        const domArr = domain.match(atomPat)\n        const len = domArr.length\n\n        // 最後のドメインが2文字か3文字の以外のとき、エラー\n        // ex) jp,comはOK\n        if (domArr[domArr.length - 1].length < 2 || domArr[domArr.length - 1].length > 4) {\n          return settings.messages.MAIL_INVALID_LOCALE\n        }\n\n        if (len < 2) {\n          return settings.messages.MAIL_INVALID_DOMAIN\n        }\n        return ''\n      },\n      format: function () {\n        const args = Array.prototype.slice.call(arguments, 0)\n        let message = args.shift()\n        $.each(args, function (index, element) {\n          message = message.replace(new RegExp('\\\\{' + index + '}', 'g'), element)\n        })\n        return message\n      },\n      /**\n       * エラーメッセージを返す\n       * @param {string[]|Object[]} arrErrors エラー情報配列\n       * @param {?string} delimiter デリミタ\n       * @returns {string} エラーメッセージ\n       */\n      join: function (arrErrors, delimiter) {\n        if (delimiter === undefined) delimiter = '\\n'\n        const arrErrorMessages = []\n        $.each(arrErrors, function (i, error) {\n          if (typeof error === 'string' && error) {\n            arrErrorMessages.push(error)\n          } else {\n            // -----------------------\n            // エラー情報追加\n            // error.name フィールド名\n            // error.d_name フィールド表示名\n            // error.message エラーメッセージ\n            // -----------------------\n            arrErrorMessages.push((error.d_name ? error.d_name : error.name) + ' : ' + error.message)\n          }\n        })\n        return arrErrorMessages.join(delimiter)\n      }\n    }\n\n    if (methods[method]) {\n      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1))\n    } else if (typeof method === 'object' || !method) {\n      return methods.init.apply(this, arguments)\n    } else {\n      $.error('Method \"' + method + '\" does not exist in ' + pluginName + ' plugin!')\n    }\n  }\n  /**\n   * デフォルト設定値\n   * @external:\"jQuery.fn\".formValidate.defaults\n   */\n  $.fn[pluginName].defaults = {\n    submit: 'validate',\n    confirm_suffix: '_confirm',\n    zip_suffix: '_after',\n    ymd_suffix_y: '_y',\n    ymd_suffix_m: '_m',\n    ymd_suffix_d: '_d',\n    fields: null,\n    errorType: null,\n    clearError: null,\n    setError: null,\n    focusError: true,\n    focusErrorSpeed: 'fast',\n    // メッセージ定義\n    messages: {\n      VALIDATE_ERROR: '入力に誤りがあります.',\n      // Required\n      REQUIRED: '必須項目です.',\n      REQUIRED_PART: '{0} は必須項目です.',\n      INSUFFICIENT: '不足しています.',\n      INSUFFICIENT_PART: '{0} が不足しています.',\n      CONFIRM: '確認{0}と異なっています.',\n      CONFIRM_FIELD: '項目',\n      // input a numerical value\n      NUMERICAL_VALUE: '数値を入力して下さい.',\n      INTEGER: '整数値を入力して下さい.',\n      INTEGER_PART: '{0} は整数値を入力して下さい.',\n      MIN: '{0} ～ の数値を入力してください.',\n      MAX: '～ {0} の数値を入力してください.',\n      RANGE: '{0} ～ {1} の数値を入力してください.',\n      MIN_LENGTH: '{0}文字以上で入力して下さい.',\n      MAX_LENGTH: '{0}文字以下で入力して下さい.',\n      NUM_LENGTH: '{0}桁の数値を入力してください.',\n      CHECKBOX_MIN: '{0} 個チェックしてください.',\n      CHECKBOX_RANGE: '{0}～{1} 個の間でチェックしてください.',\n      ZENKAKU: '全角で入力してください.',\n      HANKAKU: '半角で入力してください.',\n      ZEN_KANA: '全角カタカナで入力してください.',\n      HIRAGANA: 'ひらがなで入力してください.',\n      TEL: '数値-()で入力してください.',\n      ZIP: '[nnn-nnnn]書式で記述してください.',\n      // 日付系\n      DATE: '[YYYY/MM/DD]書式で記述してください.',\n      DATE_EX: '[YYYY/MM/DD] or [YYYY/MM] or [YYYY]書式で記述してください.',\n      DATETIME: '[YYYY/MM/DD hh:mm:ss]書式で記述してください.',\n      TIME: '[hh:mm:ss]書式で記述してください.',\n      TIME_HM: '[hh:mm:ss]書式で記述してください.',\n      DATE_INVALID: '日付が間違っています.',\n      TIME_INVALID: '時間が間違っています.',\n      DATE_PART_Y: '(年)',\n      DATE_PART_M: '(月)',\n      DATE_PART_D: '(日)',\n      // 正規表現系\n      REGEXP_INVALID_PARAM: '正規表現が間違っています.',\n      REGEXP_INVALID_VALUE: '書式が間違っています.',\n      // メール系\n      MAIL_NO_AT: '正しくありません(@).',\n      MAIL_INVALID_IP: '正しくありません(IP).',\n      MAIL_NO_DOMAIN: 'ドメイン名がありません(DOMAIN).',\n      MAIL_INVALID_LOCALE: '正しくありません(LOCALE).',\n      MAIL_INVALID_DOMAIN: 'ドメイン名の書式が誤っています.',\n      // その他\n      NOT_EXISTS_FIELD: 'フィールド名[{0}]が存在しません.'\n    }\n  }\n})(window.jQuery, window, document)\n"],"names":["$","window","pluginName","pluginSettings","fn","method","settings","methods","init","options","extend","defaults","this","each","$element","data","func","on","destroy","off","dispError","arrErrors","self","i","error","setError","apply","name","message","length","focusError","field","find","p","trigger","offset","top","innerHeight","console","warn","helpers","format","messages","NOT_EXISTS_FIELD","undefined","animate","scrollTop","focusErrorSpeed","clearError","errorType","clearErrorBootstrap3","clearErrorTb2","clearErrorBootstrap","setErrorBootstrap3","setErrorTb2","setErrorBootstrap","removeClass","nextAll","remove","errorMessage","indexOf","attr","addClass","parent","hasClass","append","filter","after","formCheck","closest","inputGroup","validate","result","getValidateResult","validate_alert","alert","VALIDATE_ERROR","join","form","fields","getFieldsRules","Array","isArray","rules","arrRules","$objVal","bValueExists","existsValue","rule","arrRuleErrors","errors","params","slice","split","JSON","parse","e","pushErrors","validateExistsMethods","REQUIRED","validateMethods","concat","formElements","get","elements","from","forEach","element","type","getAttribute","item","required","push","value","numeric","objVal","validity","badInput","validationMessage","number","zip_ex","zipAfter","zip_suffix","getValue","val","INSUFFICIENT","ymd","year","month","day","isYear","isMonth","isDay","objY","ymd_suffix_y","objM","ymd_suffix_m","objD","ymd_suffix_d","REQUIRED_PART","DATE_PART_Y","DATE_PART_M","DATE_PART_D","INSUFFICIENT_PART","_isInteger","INTEGER_PART","_isDate","DATE_INVALID","confirm","confirmVal","confirm_suffix","CONFIRM","d_name","CONFIRM_FIELD","email","errorEmail","_isEmailEx","zenkaku","_isZenkaku","ZENKAKU","hankaku","_isHankaku","HANKAKU","zen_katakana","_isAllKana","ZEN_KANA","hiragana","_isAllHiragana","HIRAGANA","tel","_isTel","TEL","minlength","min","Number","MIN_LENGTH","maxlength","max","MAX_LENGTH","isFinite","NUMERICAL_VALUE","numlength","tmpReg","tmpErrMessage","RegExp","test","NUM_LENGTH","INTEGER","MIN","range","RANGE","date","match","$2","$3","$4","DATE","datetime","$6","_isTime","$7","$8","$10","TIME_INVALID","DATETIME","date_ex","DATE_EX","y","$1","m","d","$5","time","TIME_HM","TIME","zip","ZIP","checkbox","check","CHECKBOX_RANGE","CHECKBOX_MIN","regexp","reg","REGEXP_INVALID_VALUE","REGEXP_INVALID_PARAM","ret","_text","inpText","_value","isNaN","_year","_month","_day","arrMaxMonth","_hour","_minute","_second","charAt","_strEmail","atom","validChars","domainPat","matchArray","MAIL_NO_AT","domain","IPArray","MAIL_INVALID_IP","MAIL_NO_DOMAIN","atomPat","domArr","len","MAIL_INVALID_LOCALE","MAIL_INVALID_DOMAIN","args","prototype","call","arguments","shift","index","replace","delimiter","arrErrorMessages","submit","MAX","jQuery","document"],"sourceRoot":""}